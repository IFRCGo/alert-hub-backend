# Generated by Django 5.0.3 on 2024-03-11 12:14

import apps.cap_feed.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Admin1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField()),
                ('polygon', models.TextField(blank=True, null=True)),
                ('multipolygon', models.TextField(blank=True, null=True)),
                ('min_latitude', models.FloatField(editable=False, null=True)),
                ('max_latitude', models.FloatField(editable=False, null=True)),
                ('min_longitude', models.FloatField(editable=False, null=True)),
                ('max_longitude', models.FloatField(editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(unique=True)),
                ('identifier', models.CharField()),
                ('sender', models.CharField()),
                ('sent', models.DateTimeField()),
                ('status', models.CharField(choices=[('Actual', 'Actual'), ('Exercise', 'Exercise'), ('System', 'System'), ('Test', 'Test'), ('Draft', 'Draft')])),
                ('msg_type', models.CharField(choices=[('Alert', 'Alert'), ('Update', 'Update'), ('Cancel', 'Cancel'), ('Ack', 'Ack'), ('Error', 'Error')])),
                ('source', models.CharField(blank=True, default=None, null=True)),
                ('scope', models.CharField(blank=True, default=None, null=True)),
                ('restriction', models.CharField(blank=True, default=None, null=True)),
                ('addresses', models.TextField(blank=True, default=None, null=True)),
                ('code', models.CharField(blank=True, default=None, null=True)),
                ('note', models.TextField(blank=True, default=None, null=True)),
                ('references', models.TextField(blank=True, default=None, null=True)),
                ('incidents', models.TextField(blank=True, default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Continent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField()),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField()),
                ('polygon', models.TextField(blank=True, null=True)),
                ('centroid', models.CharField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AlertAdmin1',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cap_feed.admin1')),
                ('alert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cap_feed.alert')),
            ],
        ),
        migrations.AddField(
            model_name='alert',
            name='admin1s',
            field=models.ManyToManyField(through='cap_feed.AlertAdmin1', to='cap_feed.admin1'),
        ),
        migrations.CreateModel(
            name='AlertInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(blank=True, default='en-US')),
                ('category', models.CharField(choices=[('Geo', 'Geo'), ('Met', 'Met'), ('Safety', 'Safety'), ('Security', 'Security'), ('Rescue', 'Rescue'), ('Fire', 'Fire'), ('Health', 'Health'), ('Env', 'Env'), ('Transport', 'Transport'), ('Infra', 'Infra'), ('CBRNE', 'CBRNE'), ('Other', 'Other')])),
                ('event', models.CharField()),
                ('response_type', models.CharField(blank=True, choices=[('Shelter', 'Shelter'), ('Evacuate', 'Evacuate'), ('Prepare', 'Prepare'), ('Execute', 'Execute'), ('Avoid', 'Avoid'), ('Monitor', 'Monitor'), ('Assess', 'Assess'), ('AllClear', 'AllClear'), ('None', 'None')], default=None, null=True)),
                ('urgency', models.CharField(choices=[('Immediate', 'Immediate'), ('Expected', 'Expected'), ('Future', 'Future'), ('Past', 'Past'), ('Unknown', 'Unknown')])),
                ('severity', models.CharField(choices=[('Extreme', 'Extreme'), ('Severe', 'Severe'), ('Moderate', 'Moderate'), ('Minor', 'Minor'), ('Unknown', 'Unknown')])),
                ('certainty', models.CharField(choices=[('Observed', 'Observed'), ('Likely', 'Likely'), ('Possible', 'Possible'), ('Unlikely', 'Unlikely'), ('Unknown', 'Unknown')])),
                ('audience', models.CharField(blank=True, default=None, null=True)),
                ('event_code', models.CharField(blank=True, default=None, null=True)),
                ('effective', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('onset', models.DateTimeField(blank=True, null=True)),
                ('expires', models.DateTimeField(blank=True, default=apps.cap_feed.models.AlertInfo.default_expire, null=True)),
                ('sender_name', models.CharField(blank=True, default=None, null=True)),
                ('headline', models.CharField(blank=True, default=None, null=True)),
                ('description', models.TextField(blank=True, default=None, null=True)),
                ('instruction', models.TextField(blank=True, default=None, null=True)),
                ('web', models.URLField(blank=True, default=None, null=True)),
                ('contact', models.CharField(blank=True, default=None, null=True)),
                ('parameter', models.CharField(blank=True, default=None, null=True)),
                ('alert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='infos', to='cap_feed.alert')),
            ],
        ),
        migrations.CreateModel(
            name='AlertInfoArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area_desc', models.TextField()),
                ('altitude', models.CharField(blank=True, default=None, null=True)),
                ('ceiling', models.CharField(blank=True, default=None, null=True)),
                ('alert_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cap_feed.alertinfo')),
            ],
        ),
        migrations.CreateModel(
            name='AlertInfoAreaCircle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
                ('alert_info_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cap_feed.alertinfoarea')),
            ],
        ),
        migrations.CreateModel(
            name='AlertInfoAreaGeocode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_name', models.CharField()),
                ('value', models.CharField()),
                ('alert_info_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cap_feed.alertinfoarea')),
            ],
        ),
        migrations.CreateModel(
            name='AlertInfoAreaPolygon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
                ('alert_info_area', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cap_feed.alertinfoarea')),
            ],
        ),
        migrations.CreateModel(
            name='AlertInfoParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_name', models.CharField()),
                ('value', models.TextField()),
                ('alert_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cap_feed.alertinfo')),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField()),
                ('iso3', models.CharField(unique=True, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(3)])),
                ('polygon', models.TextField(blank=True, null=True)),
                ('multipolygon', models.TextField(blank=True, null=True)),
                ('centroid', models.CharField(blank=True, null=True)),
                ('continent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cap_feed.continent')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cap_feed.region')),
            ],
        ),
        migrations.AddField(
            model_name='alert',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cap_feed.country'),
        ),
        migrations.AddField(
            model_name='admin1',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cap_feed.country'),
        ),
        migrations.CreateModel(
            name='Feed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(unique=True)),
                ('format', models.CharField(choices=[('atom', 'atom'), ('rss', 'rss'), ('nws_us', 'nws_us')])),
                ('polling_interval', models.IntegerField(choices=[(5, '5 seconds'), (10, '10 seconds'), (15, '15 seconds'), (20, '20 seconds'), (25, '25 seconds'), (30, '30 seconds'), (35, '35 seconds'), (40, '40 seconds'), (45, '45 seconds'), (50, '50 seconds'), (55, '55 seconds'), (60, '60 seconds')])),
                ('enable_polling', models.BooleanField(default=False)),
                ('enable_rebroadcast', models.BooleanField(default=False)),
                ('official', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('active', 'active'), ('testing', 'testing'), ('inactive', 'inactive'), ('unusable', 'unusable')], default='active')),
                ('author_name', models.CharField(default='')),
                ('author_email', models.CharField(default='')),
                ('notes', models.TextField(blank=True, default='')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cap_feed.country')),
            ],
        ),
        migrations.AddField(
            model_name='alert',
            name='feed',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cap_feed.feed'),
        ),
        migrations.CreateModel(
            name='FeedLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exception', models.CharField(default='exception')),
                ('error_message', models.TextField(default='')),
                ('description', models.TextField(default='')),
                ('response', models.TextField(default='')),
                ('alert_url', models.CharField(blank=True, default='')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('notes', models.TextField(blank=True, default='')),
                ('feed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cap_feed.feed')),
            ],
        ),
        migrations.CreateModel(
            name='LanguageInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField()),
                ('language', models.CharField(blank=True, choices=[('ab', 'ab - Abkhazian'), ('aa', 'aa - Afar'), ('af', 'af - Afrikaans'), ('ak', 'ak - Akan'), ('sq', 'sq - Albanian'), ('am', 'am - Amharic'), ('ar', 'ar - Arabic'), ('an', 'an - Aragonese'), ('hy', 'hy - Armenian'), ('as', 'as - Assamese'), ('av', 'av - Avaric'), ('ae', 'ae - Avestan'), ('ay', 'ay - Aymara'), ('az', 'az - Azerbaijani'), ('bm', 'bm - Bambara'), ('ba', 'ba - Bashkir'), ('eu', 'eu - Basque'), ('be', 'be - Belarusian'), ('bn', 'bn - Bengali'), ('bh', 'bh - Bihari languages'), ('bi', 'bi - Bislama'), ('bs', 'bs - Bosnian'), ('br', 'br - Breton'), ('bg', 'bg - Bulgarian'), ('my', 'my - Burmese'), ('ca', 'ca - Catalan'), ('ch', 'ch - Chamorro'), ('ce', 'ce - Chechen'), ('zh', 'zh - Chinese'), ('cu', 'cu - Church Slavic'), ('cv', 'cv - Chuvash'), ('kw', 'kw - Cornish'), ('co', 'co - Corsican'), ('cr', 'cr - Cree'), ('hr', 'hr - Croatian'), ('cs', 'cs - Czech'), ('da', 'da - Danish'), ('dv', 'dv - Dhivehi'), ('nl', 'nl - Dutch'), ('dz', 'dz - Dzongkha'), ('en', 'en - English'), ('eo', 'eo - Esperanto'), ('et', 'et - Estonian'), ('ee', 'ee - Ewe'), ('fo', 'fo - Faroese'), ('fj', 'fj - Fijian'), ('fi', 'fi - Finnish'), ('fr', 'fr - French'), ('ff', 'ff - Fulah'), ('gl', 'gl - Galician'), ('lg', 'lg - Ganda'), ('ka', 'ka - Georgian'), ('de', 'de - German'), ('gn', 'gn - Guarani'), ('gu', 'gu - Gujarati'), ('ht', 'ht - Haitian'), ('ha', 'ha - Hausa'), ('he', 'he - Hebrew'), ('hz', 'hz - Herero'), ('hi', 'hi - Hindi'), ('ho', 'ho - Hiri Motu'), ('hu', 'hu - Hungarian'), ('is', 'is - Icelandic'), ('io', 'io - Ido'), ('ig', 'ig - Igbo'), ('id', 'id - Indonesian'), ('ia', 'ia - Interlingua (International Auxiliary Language Association)'), ('ie', 'ie - Interlingue'), ('iu', 'iu - Inuktitut'), ('ik', 'ik - Inupiaq'), ('ga', 'ga - Irish'), ('it', 'it - Italian'), ('ja', 'ja - Japanese'), ('jv', 'jv - Javanese'), ('kl', 'kl - Kalaallisut'), ('kn', 'kn - Kannada'), ('kr', 'kr - Kanuri'), ('ks', 'ks - Kashmiri'), ('kk', 'kk - Kazakh'), ('km', 'km - Khmer'), ('ki', 'ki - Kikuyu'), ('rw', 'rw - Kinyarwanda'), ('ky', 'ky - Kirghiz'), ('kv', 'kv - Komi'), ('kg', 'kg - Kongo'), ('ko', 'ko - Korean'), ('kj', 'kj - Kuanyama'), ('ku', 'ku - Kurdish'), ('lo', 'lo - Lao'), ('la', 'la - Latin'), ('lv', 'lv - Latvian'), ('li', 'li - Limburgan'), ('ln', 'ln - Lingala'), ('lt', 'lt - Lithuanian'), ('lu', 'lu - Luba-Katanga'), ('lb', 'lb - Luxembourgish'), ('mk', 'mk - Macedonian'), ('mg', 'mg - Malagasy'), ('ms', 'ms - Malay (macrolanguage)'), ('ml', 'ml - Malayalam'), ('mt', 'mt - Maltese'), ('gv', 'gv - Manx'), ('mi', 'mi - Maori'), ('mr', 'mr - Marathi'), ('mh', 'mh - Marshallese'), ('el', 'el - Modern Greek (1453-)'), ('mn', 'mn - Mongolian'), ('na', 'na - Nauru'), ('nv', 'nv - Navajo'), ('ng', 'ng - Ndonga'), ('ne', 'ne - Nepali (macrolanguage)'), ('nd', 'nd - North Ndebele'), ('se', 'se - Northern Sami'), ('no', 'no - Norwegian'), ('nb', 'nb - Norwegian Bokmål'), ('nn', 'nn - Norwegian Nynorsk'), ('ny', 'ny - Nyanja'), ('oc', 'oc - Occitan (post 1500)'), ('oj', 'oj - Ojibwa'), ('or', 'or - Oriya (macrolanguage)'), ('om', 'om - Oromo'), ('os', 'os - Ossetian'), ('pi', 'pi - Pali'), ('pa', 'pa - Panjabi'), ('fa', 'fa - Persian'), ('pl', 'pl - Polish'), ('pt', 'pt - Portuguese'), ('ps', 'ps - Pushto'), ('qu', 'qu - Quechua'), ('ro', 'ro - Romanian'), ('rm', 'rm - Romansh'), ('rn', 'rn - Rundi'), ('ru', 'ru - Russian'), ('sm', 'sm - Samoan'), ('sg', 'sg - Sango'), ('sa', 'sa - Sanskrit'), ('sc', 'sc - Sardinian'), ('gd', 'gd - Scottish Gaelic'), ('sr', 'sr - Serbian'), ('sh', 'sh - Serbo-Croatian'), ('sn', 'sn - Shona'), ('ii', 'ii - Sichuan Yi'), ('sd', 'sd - Sindhi'), ('si', 'si - Sinhala'), ('sk', 'sk - Slovak'), ('sl', 'sl - Slovenian'), ('so', 'so - Somali'), ('nr', 'nr - South Ndebele'), ('st', 'st - Southern Sotho'), ('es', 'es - Spanish'), ('su', 'su - Sundanese'), ('sw', 'sw - Swahili (macrolanguage)'), ('ss', 'ss - Swati'), ('sv', 'sv - Swedish'), ('tl', 'tl - Tagalog'), ('ty', 'ty - Tahitian'), ('tg', 'tg - Tajik'), ('ta', 'ta - Tamil'), ('tt', 'tt - Tatar'), ('te', 'te - Telugu'), ('th', 'th - Thai'), ('bo', 'bo - Tibetan'), ('ti', 'ti - Tigrinya'), ('to', 'to - Tonga (Tonga Islands)'), ('ts', 'ts - Tsonga'), ('tn', 'tn - Tswana'), ('tr', 'tr - Turkish'), ('tk', 'tk - Turkmen'), ('tw', 'tw - Twi'), ('ug', 'ug - Uighur'), ('uk', 'uk - Ukrainian'), ('ur', 'ur - Urdu'), ('uz', 'uz - Uzbek'), ('ve', 've - Venda'), ('vi', 'vi - Vietnamese'), ('vo', 'vo - Volapük'), ('wa', 'wa - Walloon'), ('cy', 'cy - Welsh'), ('fy', 'fy - Western Frisian'), ('wo', 'wo - Wolof'), ('xh', 'xh - Xhosa'), ('yi', 'yi - Yiddish'), ('yo', 'yo - Yoruba'), ('za', 'za - Zhuang'), ('zu', 'zu - Zulu')], default='en-US', null=True)),
                ('logo', models.CharField(blank=True, null=True)),
                ('feed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cap_feed.feed')),
            ],
        ),
        migrations.CreateModel(
            name='ProcessedAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(unique=True)),
                ('expires', models.DateTimeField(default=apps.cap_feed.models.ProcessedAlert.default_expire)),
                ('feed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cap_feed.feed')),
            ],
        ),
        migrations.AddConstraint(
            model_name='feedlog',
            constraint=models.UniqueConstraint(fields=('alert_url', 'description'), name='unique_alert_error'),
        ),
    ]
